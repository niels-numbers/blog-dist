import{_ as s,c as a,o as e,a as n}from"./app.b76f1efb.js";const D=JSON.parse('{"title":"Setup Laravel with Vue","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. How to install Laravel, Vue.js, and Inertia","slug":"_1-how-to-install-laravel-vue-js-and-inertia","link":"#_1-how-to-install-laravel-vue-js-and-inertia","children":[{"level":3,"title":"1.1 Install Laravel","slug":"_1-1-install-laravel","link":"#_1-1-install-laravel","children":[]},{"level":3,"title":"Running Multiple Laravel Projects","slug":"running-multiple-laravel-projects","link":"#running-multiple-laravel-projects","children":[]},{"level":3,"title":"1.2 Install Vue.js and Inertia","slug":"_1-2-install-vue-js-and-inertia","link":"#_1-2-install-vue-js-and-inertia","children":[]},{"level":3,"title":"Create a Vue Component","slug":"create-a-vue-component","link":"#create-a-vue-component","children":[]},{"level":3,"title":"Add the Route","slug":"add-the-route","link":"#add-the-route","children":[]},{"level":3,"title":"Recommended Folder Structure","slug":"recommended-folder-structure","link":"#recommended-folder-structure","children":[]}]},{"level":2,"title":"2. Breeze Starter Kit Setup","slug":"_2-breeze-starter-kit-setup","link":"#_2-breeze-starter-kit-setup","children":[{"level":3,"title":"Differences to the Manual Setup","slug":"differences-to-the-manual-setup","link":"#differences-to-the-manual-setup","children":[]}]},{"level":2,"title":"3. Running an Existing Sail Laravel Application Locally","slug":"_3-running-an-existing-sail-laravel-application-locally","link":"#_3-running-an-existing-sail-laravel-application-locally","children":[{"level":3,"title":"\u{1F4DD} Using Legacy Laravel Versions","slug":"\u{1F4DD}-using-legacy-laravel-versions","link":"#\u{1F4DD}-using-legacy-laravel-versions","children":[]}]}],"relativePath":"setup/getting-started.md"}'),l={name:"setup/getting-started.md"},o=n(`<h1 id="setup-laravel-with-vue" tabindex="-1">Setup Laravel with Vue <a class="header-anchor" href="#setup-laravel-with-vue" aria-hidden="true">#</a></h1><p>In this section, I will guide you through setting up a Laravel project with Vue.js and Inertia.js, both <strong>manually</strong> and using the <strong>Laravel Breeze Starter Kit</strong>. I will also explain the differences and benefits of each approach.</p><blockquote><p><strong>Note:</strong> This is a quick reference for experienced developers, on how to set up Laravel with Vue.js and Inertia. If you are new to Inertia.js, I highly recommend watching the <a href="https://laracasts.com/series/build-modern-laravel-apps-using-inertia-js" target="_blank" rel="noreferrer">Laracasts series on Inertia.js</a>.</p></blockquote><h2 id="_1-how-to-install-laravel-vue-js-and-inertia" tabindex="-1">1. How to install Laravel, Vue.js, and Inertia <a class="header-anchor" href="#_1-how-to-install-laravel-vue-js-and-inertia" aria-hidden="true">#</a></h2><h3 id="_1-1-install-laravel" tabindex="-1">1.1 Install Laravel <a class="header-anchor" href="#_1-1-install-laravel" aria-hidden="true">#</a></h3><p>The cleanest way to install Laravel is by setting it up with Docker. This avoids any PHP or Composer conflicts on your local machine.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">docker run --rm \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    --pull=always \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    -v </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#C3E88D;">pwd</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#A6ACCD;">:/opt \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    -w /opt \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    --user </span><span style="color:#89DDFF;">$(</span><span style="color:#C3E88D;">id -u</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;">$(</span><span style="color:#C3E88D;">id -g</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    laravelsail/php84-composer:latest \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    bash -c </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">laravel new example-app --no-interaction &amp;&amp; cd example-app &amp;&amp; php ./artisan sail:install --with=mysql</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span></code></pre></div><p>This will:</p><ol><li>Create a fresh Laravel installation in the <code>example-app</code> folder.</li><li>Automatically configure Sail with MySQL.</li><li>Install dependencies inside Docker, avoiding local PHP extension conflicts.</li></ol><p>Navigate into your project and start Sail:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> example-app</span></span>
<span class="line"><span style="color:#A6ACCD;">./vendor/bin/sail up -d</span></span>
<span class="line"><span style="color:#A6ACCD;">./vendor/bin/sail npm install</span></span>
<span class="line"><span style="color:#A6ACCD;">./vendor/bin/sail npm run dev</span></span>
<span class="line"></span></code></pre></div><p>The application is now available at <code>localhost</code>.</p><hr><h3 id="running-multiple-laravel-projects" tabindex="-1"><strong>Running Multiple Laravel Projects</strong> <a class="header-anchor" href="#running-multiple-laravel-projects" aria-hidden="true">#</a></h3><p>If you want to run multiple Sail projects at the same time, you can set the <code>APP_PORT</code> environment variable in your <code>.env</code> file for each application. For example:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">APP_PORT=8081</span></span>
<span class="line"></span></code></pre></div><p>And then start Sail:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">./vendor/bin/sail up -d</span></span>
<span class="line"></span></code></pre></div><p>Your application will now be available at <code>localhost:8081</code>. This way, you can run multiple applications simultaneous.</p><p>To keep your container running after a restart, add the flag in <code>docker-compose.yml</code>:</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">laravel.test</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">restart</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">unless-stopped</span></span>
<span class="line"></span></code></pre></div><p>This will ensure the container automatically restarts after a reboot or Docker restart.</p><h4 id="alternative-method-curl" tabindex="-1"><strong>Alternative Method (curl)</strong> <a class="header-anchor" href="#alternative-method-curl" aria-hidden="true">#</a></h4><p>This is essentially a wrapper for the Docker command above, adding some extra scripting sugar. It pulls the same Docker image, runs the setup, and spins up a Sail environment. The difference is that it handles Docker Compose automatically and provides a quick start.</p><p>You can directly view the script that is being executed <a href="https://laravel.build/example-app" target="_blank" rel="noreferrer">here</a>.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">curl -s https://laravel.build/example-app </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> bash</span></span>
<span class="line"></span></code></pre></div><p>However, this method is no longer documented in the 12.x version of the Laravel Docs, and the URL might be deprecated in the future. It&#39;s recommended to use the direct Docker command instead.</p><hr><h3 id="_1-2-install-vue-js-and-inertia" tabindex="-1">1.2 Install Vue.js and Inertia <a class="header-anchor" href="#_1-2-install-vue-js-and-inertia" aria-hidden="true">#</a></h3><p>After setting up Laravel, let&#39;s install Vue.js and Inertia:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">./vendor/bin/sail composer require inertiajs/inertia-laravel</span></span>
<span class="line"><span style="color:#A6ACCD;">./vendor/bin/sail npm install @inertiajs/vue3</span></span>
<span class="line"><span style="color:#A6ACCD;">./vendor/bin/sail npm install vue@3</span></span>
<span class="line"><span style="color:#A6ACCD;">./vendor/bin/sail npm install --save-dev vite</span></span>
<span class="line"></span></code></pre></div><p>Adjust the <code>vite.config.js</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> vue </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@vitejs/plugin-vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#82AAFF;">vue</span><span style="color:#A6ACCD;">()]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">server</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">host</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">127.0.0.1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="create-a-vue-component" tabindex="-1"><strong>Create a Vue Component</strong> <a class="header-anchor" href="#create-a-vue-component" aria-hidden="true">#</a></h3><p>In <code>resources/js/Pages/</code>, create a new file called <code>Welcome.vue</code>:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// resources/js/Pages/Welcome.vue</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Welcome to Laravel + Inertia + Vue.js!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="add-the-route" tabindex="-1"><strong>Add the Route</strong> <a class="header-anchor" href="#add-the-route" aria-hidden="true">#</a></h3><p>In your <code>routes/web.php</code>, add the following route:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Inertia</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Inertia</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Inertia</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Welcome</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="recommended-folder-structure" tabindex="-1"><strong>Recommended Folder Structure</strong> <a class="header-anchor" href="#recommended-folder-structure" aria-hidden="true">#</a></h3><p>When using Laravel Breeze, your Vue components will be organized as follows:</p><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">resources/js/</span></span>
<span class="line"><span style="color:#A6ACCD;">\u251C\u2500\u2500 components/    # Reusable Vue components</span></span>
<span class="line"><span style="color:#A6ACCD;">\u251C\u2500\u2500 composables/   # Vue composables / hooks</span></span>
<span class="line"><span style="color:#A6ACCD;">\u251C\u2500\u2500 layouts/       # Application layouts</span></span>
<span class="line"><span style="color:#A6ACCD;">\u251C\u2500\u2500 lib/           # Utility functions and configuration</span></span>
<span class="line"><span style="color:#A6ACCD;">\u251C\u2500\u2500 pages/         # Page components</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2514\u2500\u2500 types/         # TypeScript definitions</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>You can find more information on <a href="https://laravel.com/docs/12.x/starter-kits" target="_blank" rel="noreferrer">Laravel Breeze Starter Kit</a>.</p><hr><h2 id="_2-breeze-starter-kit-setup" tabindex="-1">2. Breeze Starter Kit Setup <a class="header-anchor" href="#_2-breeze-starter-kit-setup" aria-hidden="true">#</a></h2><p>If you want a faster setup, you can use Laravel Breeze, which includes Vue, Inertia, and Tailwind out of the box:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">composer require laravel/breeze --dev</span></span>
<span class="line"><span style="color:#A6ACCD;">php artisan breeze:install vue</span></span>
<span class="line"><span style="color:#A6ACCD;">npm install</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run dev</span></span>
<span class="line"></span></code></pre></div><p>Navigate to <code>localhost:8000</code>, and you should see the full authentication system in place.</p><h3 id="differences-to-the-manual-setup" tabindex="-1"><strong>Differences to the Manual Setup</strong> <a class="header-anchor" href="#differences-to-the-manual-setup" aria-hidden="true">#</a></h3><p>The Breeze Starter Kit comes with:</p><ul><li>Pre-built authentication (Login, Register, Password Reset)</li><li>Pre-configured Vue components</li><li>Fully integrated Tailwind CSS and the <a href="https://www.shadcn-vue.com/" target="_blank" rel="noreferrer">shadcn library</a></li></ul><p>It is designed for rapid development and ready-made views, while the manual setup is more lightweight and customizable.</p><h2 id="_3-running-an-existing-sail-laravel-application-locally" tabindex="-1">3. Running an Existing Sail Laravel Application Locally <a class="header-anchor" href="#_3-running-an-existing-sail-laravel-application-locally" aria-hidden="true">#</a></h2><p>If you already have an existing Laravel application that was set up with Sail, you may notice that the <code>vendor/bin/sail</code> file is missing. This is because the <code>vendor</code> folder is usually not versioned in Git. To get Sail up and running, you need to install the dependencies manually:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># Enter your project directory</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> your-project</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># Install Composer dependencies inside Docker</span></span>
<span class="line"><span style="color:#A6ACCD;">docker run --rm \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    -v </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#C3E88D;">pwd</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#A6ACCD;">:/opt \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    -w /opt \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    laravelsail/php8 2-composer:latest \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    composer install</span></span>
<span class="line"></span></code></pre></div><p>This will install all the dependencies inside Docker, avoiding local PHP version issues. After that, you can run:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">./vendor/bin/sail up -d</span></span>
<span class="line"><span style="color:#A6ACCD;">./vendor/bin/sail npm install</span></span>
<span class="line"><span style="color:#A6ACCD;">./vendor/bin/sail npm run dev</span></span>
<span class="line"></span></code></pre></div><p>The application should be available at <code>localhost</code>.</p><hr><h3 id="\u{1F4DD}-using-legacy-laravel-versions" tabindex="-1">\u{1F4DD} <strong>Using Legacy Laravel Versions</strong> <a class="header-anchor" href="#\u{1F4DD}-using-legacy-laravel-versions" aria-hidden="true">#</a></h3><p>If you are working with an older Laravel application that doesn&#39;t use Sail, you can still use Docker. I have a minimal Docker setup available that is a very minimalistic version of Sail but is designed for legacy versions:</p><p><a href="https://github.com/iwasherefirst2/laravel-docker" target="_blank" rel="noreferrer">GitHub Repository - Laravel Docker Setup</a></p><p>This setup provides:</p><ul><li>PHP-FPM</li><li>MySQL</li><li>Nginx</li></ul><p>To use it, simply clone the repository and follow the instructions in the README.</p><hr>`,69),p=[o];function t(r,i,c,d,u,y){return e(),a("div",null,p)}const C=s(l,[["render",t]]);export{D as __pageData,C as default};
