import{_ as e,c as t,o as a,a as r}from"./app.8621eb13.js";const b=JSON.parse('{"title":"Basic Website Loading","description":"","frontmatter":{},"headers":[{"level":2,"title":"Website Loading with JavaScript","slug":"website-loading-with-javascript","link":"#website-loading-with-javascript","children":[{"level":3,"title":"Inline","slug":"inline","link":"#inline","children":[]},{"level":3,"title":"Defer","slug":"defer","link":"#defer","children":[]},{"level":3,"title":"Async","slug":"async","link":"#async","children":[]},{"level":3,"title":"DomContentLoaded Event","slug":"domcontentloaded-event","link":"#domcontentloaded-event","children":[]},{"level":3,"title":"Load Event","slug":"load-event","link":"#load-event","children":[]}]}],"relativePath":"web-performance/js-loading.md"}'),n={name:"web-performance/js-loading.md"},o=r('<h1 id="basic-website-loading" tabindex="-1">Basic Website Loading <a class="header-anchor" href="#basic-website-loading" aria-hidden="true">#</a></h1><p>When a website is loaded, first the HTML is requested. When the response has been read, the <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model" target="_blank" rel="noreferrer">DOM tree</a> will be created, then the <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model" target="_blank" rel="noreferrer">CSS tree</a>, after both have been parsed the <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction" target="_blank" rel="noreferrer">render tree</a> is generated which will trigger layout computations and finally paint the website.</p><p>The above steps are repeated multiple times. <a href="https://stackoverflow.com/questions/34289535/why-first-paint-is-happening-before-domcontentloaded/34368685#34368685" target="_blank" rel="noreferrer">First paint is absolutly possible before DOM tree has been created completly</a>. Painting the website is a <a href="https://web.dev/howbrowserswork/#The_main_flow" target="_blank" rel="noreferrer">gradual process</a>.</p><p>When the HTML resource is loaded and the DOM tree is rendered completly, the <a href="https://developer.mozilla.org/de/docs/Web/API/Window/DOMContentLoaded_event" target="_blank" rel="noreferrer">DOMContentLoaded</a> event is triggered. In contrast, the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event" target="_blank" rel="noreferrer">load</a> event is triggered when the all resources have been loaded (HTML, stylesheets and images etc.). Note that usually DOMCOntentLoaded comes before load, but not <a href="https://stackoverflow.com/questions/69503436/why-load-event-comes-before-domcontentloaded/73095571#73095571" target="_blank" rel="noreferrer">necessarily</a>.</p><h2 id="website-loading-with-javascript" tabindex="-1">Website Loading with JavaScript <a class="header-anchor" href="#website-loading-with-javascript" aria-hidden="true">#</a></h2><p>When JavaScript is involved, then things do change. When JS <code>&lt;script&gt;</code> is detected, it needs to make sure that all CSS and HTML that has been detected up to now, is parsed. As CSS scripts are usually located in the header, this means the JS may wait for the complete CSS resource to be downloaded and wait for the rendering of the CSS tree before the JS is executed. In addition the JS will also wait for the DOM tree to be parsed until the JS script was detected. Now the script will be executed and block the rendering of the CSS and HTML tree.</p><p>That is the reason, why it is recommended to put the <code>&lt;script&gt;</code> tag always at the end of the <code>&lt;body&gt;</code> section, as the DOM and CSS tree would be rendered first completly (almost as the <code>&lt;/body&gt;</code> is missing in DOM tree). However, this means the website will wait until DOM and CSS tree are complete, and then it will start to download the JS resource. Luckily, a developer has the following options to improve the flow.</p><h3 id="inline" tabindex="-1">Inline <a class="header-anchor" href="#inline" aria-hidden="true">#</a></h3><p>The script will be executed and block DOM/CSS tree. As there is nothing to download, this is an improvement. But it also has the downsite that it makes importing scripts for your website cumbersome and also does not allow the browser to use caching functionality.</p><h3 id="defer" tabindex="-1">Defer <a class="header-anchor" href="#defer" aria-hidden="true">#</a></h3><p>Put the <code>&lt;script defer&gt;</code> tag in the header. The defer attribute will request the resource and download in while the website is build, but it will trigger the JS only when the DOM tree is rendered. The JS will be executed before the event <code>DOMContentLoaded</code> is executed.</p><p>The benefit of this tag is that script can be downloaded in parallel while the render tree is parsed.</p><p>Defer can be used for script tags that reference to a remote file, as well as scripts that are inline.</p><h3 id="async" tabindex="-1">Async <a class="header-anchor" href="#async" aria-hidden="true">#</a></h3><p>Using <code>&lt;script async&gt;</code> attribute will request the resource and download in while the website is build, it will trigger the JS as soon as the code is available. This download of the JS resouce does not block DOM/CSS tree rendering, but the execution of the script does.</p><p>Async can be used for scripts that reference to a remote file, as well as scripts that are inline (although it makes no difference for the latter, as there is nothing to download).</p><h3 id="domcontentloaded-event" tabindex="-1">DomContentLoaded Event <a class="header-anchor" href="#domcontentloaded-event" aria-hidden="true">#</a></h3><p>You can write an <a href="https://developer.mozilla.org/de/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="noreferrer">event listener</a> that waits to execute the code once the DOM tree has been created.</p><h3 id="load-event" tabindex="-1">Load Event <a class="header-anchor" href="#load-event" aria-hidden="true">#</a></h3><p>If your JS changes the image size or any other resource, its probably best to wait till all resources have been loaded. Note that <code>load</code> alone does not guarantee that the DOM tree has been created. If you need both, you could load your script using <code>defer</code> and wait in the script for the <code>load</code> event.</p><h4 id="useful-resources" tabindex="-1">Useful resources: <a class="header-anchor" href="#useful-resources" aria-hidden="true">#</a></h4><ul><li><a href="https://bitsofco.de/understanding-the-critical-rendering-path/" target="_blank" rel="noreferrer">https://bitsofco.de/understanding-the-critical-rendering-path/</a></li><li><a href="https://www.tutorialexample.com/understand-javascript-async-vs-defer-vs-inline-when-to-use-async-defer-or-inline/" target="_blank" rel="noreferrer">https://www.tutorialexample.com/understand-javascript-async-vs-defer-vs-inline-when-to-use-async-defer-or-inline/</a></li><li><a href="https://web.dev/critical-rendering-path-analyzing-crp/" target="_blank" rel="noreferrer">https://web.dev/critical-rendering-path-analyzing-crp/</a></li></ul>',22),i=[o];function s(d,l,h,c,p,f){return a(),t("div",null,i)}const g=e(n,[["render",s]]);export{b as __pageData,g as default};
