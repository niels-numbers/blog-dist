import{_ as s,c as e,o as a,a as n}from"./app.74c48566.js";const m=JSON.parse('{"title":"Naming Conventions","description":"","frontmatter":{},"headers":[{"level":2,"title":"Laravel (Backend \u2013 PHP)","slug":"laravel-backend-\u2013-php","link":"#laravel-backend-\u2013-php","children":[{"level":3,"title":"Eloquent JSON Serialization","slug":"eloquent-json-serialization","link":"#eloquent-json-serialization","children":[]}]},{"level":2,"title":"Vue.js (Frontend \u2013 Inertia.js + useForm)","slug":"vue-js-frontend-\u2013-inertia-js-useform","link":"#vue-js-frontend-\u2013-inertia-js-useform","children":[]},{"level":2,"title":"Component Naming in Vue","slug":"component-naming-in-vue","link":"#component-naming-in-vue","children":[]},{"level":2,"title":"Request Handling (Form Submission)","slug":"request-handling-form-submission","link":"#request-handling-form-submission","children":[]},{"level":2,"title":"Working with DTOs","slug":"working-with-dtos","link":"#working-with-dtos","children":[]},{"level":2,"title":"\u2705 Tip: Consistency Table","slug":"\u2705-tip-consistency-table","link":"#\u2705-tip-consistency-table","children":[]}],"relativePath":"conventions/FormNaming.md"}'),o={name:"conventions/FormNaming.md"},l=n(`<h1 id="naming-conventions" tabindex="-1">Naming Conventions <a class="header-anchor" href="#naming-conventions" aria-hidden="true">#</a></h1><h2 id="laravel-backend-\u2013-php" tabindex="-1">Laravel (Backend \u2013 PHP) <a class="header-anchor" href="#laravel-backend-\u2013-php" aria-hidden="true">#</a></h2><ul><li>Use <code>snake_case</code> for: <ul><li>Database columns</li><li>Eloquent attributes</li></ul></li></ul><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">first_name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">first_name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">email_address</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">email_address</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">];</span></span>
<span class="line"></span></code></pre></div><ul><li>Use <code>camelCase</code> when passing data to Vue components (see below).</li></ul><hr><h3 id="eloquent-json-serialization" tabindex="-1">Eloquent JSON Serialization <a class="header-anchor" href="#eloquent-json-serialization" aria-hidden="true">#</a></h3><ul><li>Relationships and accessors are automatically serialized in <code>snake_case</code>.</li><li>This behavior is documented here:<br><a href="https://laravel.com/docs/9.x/eloquent-serialization#relationships" target="_blank" rel="noreferrer">Laravel Docs \u2013 Eloquent Serialization</a></li></ul><h2 id="vue-js-frontend-\u2013-inertia-js-useform" tabindex="-1">Vue.js (Frontend \u2013 Inertia.js + useForm) <a class="header-anchor" href="#vue-js-frontend-\u2013-inertia-js-useform" aria-hidden="true">#</a></h2><ul><li>Use <code>snake_case</code> in useForm() and <code>camelCase</code> for props coming from Laravel:</li></ul><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Inertia</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">UserDashboard/Index</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">compact</span><span style="color:#89DDFF;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">firstName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">emailAddress</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]));</span></span>
<span class="line"></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">const props = defineProps([&#39;firstName&#39;, &#39;lastName]);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const form = useForm({</span></span>
<span class="line"><span style="color:#A6ACCD;">  first_name: props.firstName,</span></span>
<span class="line"><span style="color:#A6ACCD;">  email_address: props.emailAddress,</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Why this inconsistency?</p><ul><li>JavaScript prefers camelCase.</li><li>Blade/HTML forms historically use <code>snake_case</code>, which aligns with <code>$request-&gt;input(&#39;first_name&#39;)</code> in Laravel.</li><li>Older Inertia versions auto-converted <code>snake_case</code> from controller to camelCase, but that \u201Cmagic\u201D was <a href="https://github.com/inertiajs/inertia/pull/693" target="_blank" rel="noreferrer">removed</a> due to many issues surrounding this behaviour.</li><li>Today, be explicit and consistent.</li></ul><h2 id="component-naming-in-vue" tabindex="-1">Component Naming in Vue <a class="header-anchor" href="#component-naming-in-vue" aria-hidden="true">#</a></h2><p>For props and components in templates, prefer camelCase in JSX and kebab-case in DOM templates. But Vue 3 no longer <a href="https://github.com/vuejs/docs/pull/2161/files" target="_blank" rel="noreferrer">enforces this strictly</a>.</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">&lt;WelcomeMessage greetingText=&quot;Hi&quot; /&gt;</span></span>
<span class="line"></span></code></pre></div><hr><h2 id="request-handling-form-submission" tabindex="-1">Request Handling (Form Submission) <a class="header-anchor" href="#request-handling-form-submission" aria-hidden="true">#</a></h2><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">input</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">first_name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="working-with-dtos" tabindex="-1">Working with DTOs <a class="header-anchor" href="#working-with-dtos" aria-hidden="true">#</a></h2><ul><li>DTOs at Laravel should generally use <code>camelCase</code> for DTO keys</li></ul><h2 id="\u2705-tip-consistency-table" tabindex="-1">\u2705 Tip: Consistency Table <a class="header-anchor" href="#\u2705-tip-consistency-table" aria-hidden="true">#</a></h2><table><thead><tr><th>Context</th><th>Convention</th><th>Example</th></tr></thead><tbody><tr><td>Laravel code</td><td><code>snake_case</code></td><td><code>$user-&gt;first_name</code></td></tr><tr><td>Vue component</td><td><code>snake_case</code></td><td><code>form.firstName</code></td></tr><tr><td>Inertia props (PHP)</td><td><code>camelCase</code></td><td><code>&#39;firstName&#39; =&gt; ...</code></td></tr><tr><td>Inertia props (Vue)</td><td><code>camelCase</code></td><td><code>props.user.firstName</code></td></tr><tr><td>Form field name</td><td><code>camelCase</code></td><td><code>form.firstName</code></td></tr><tr><td>DTO</td><td><code>camelCase</code></td><td><code>dto.firstName</code></td></tr></tbody></table>`,24),t=[l];function r(i,p,c,d,u,h){return a(),e("div",null,t)}const y=s(o,[["render",r]]);export{m as __pageData,y as default};
